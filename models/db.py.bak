# -*- coding: utf-8 -*- 

#########################################################################
## This scaffolding model makes your app work on Google App Engine too
#########################################################################

if request.env.web2py_runtime_gae:            # if running on Google App Engine
    db = DAL('gae')                           # connect to Google BigTable
    session.connect(request, response, db = db) # and store sessions and tickets there
    ### or use the following lines to store sessions in Memcache
    # from gluon.contrib.memdb import MEMDB
    # from google.appengine.api.memcache import Client
    # session.connect(request, response, db = MEMDB(Client()))
else:                                         # else use a normal relational database
    db = DAL('sqlite://storage.sqlite')       # if not, use SQLite or other DB
## if no need for session
# session.forget()

#########################################################################
## Here is sample code if you need for 
## - email capabilities
## - authentication (registration, login, logout, ... )
## - authorization (role based authorization)
## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)
## - crud actions
## (more options discussed in gluon/tools.py)
#########################################################################

from gluon.tools import *
mail = Mail()                                  # mailer
auth = Auth(globals(),db)                      # authentication/authorization
crud = Crud(globals(),db)                      # for CRUD helpers using auth
service = Service(globals())                   # for json, xml, jsonrpc, xmlrpc, amfrpc
plugins = PluginManager()

mail.settings.server = 'logging' or 'smtp.gmail.com:587'  # your SMTP server
mail.settings.sender = 'you@gmail.com'         # your email
mail.settings.login = 'username:password'      # your credentials or None

auth.settings.hmac_key = 'sha512:5e51a644-2c9b-48f2-b226-79281a56d39c'   # before define_tables()
auth.define_tables()                           # creates all needed tables
auth.settings.mailer = mail                    # for user email verification
auth.settings.registration_requires_verification = False
auth.settings.registration_requires_approval = False
auth.messages.verify_email = 'Click on the link http://'+request.env.http_host+URL(r=request,c='default',f='user',args=['verify_email'])+'/%(key)s to verify your email'
auth.settings.reset_password_requires_verification = True
auth.messages.reset_password = 'Click on the link http://'+request.env.http_host+URL(r=request,c='default',f='user',args=['reset_password'])+'/%(key)s to reset your password'

#########################################################################
## If you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.
## register with janrain.com, uncomment and customize following
# from gluon.contrib.login_methods.rpx_account import RPXAccount
# auth.settings.actions_disabled=['register','change_password','request_reset_password']
# auth.settings.login_form = RPXAccount(request, api_key='...',domain='...',
#    url = "http://localhost:8000/%s/default/user/login" % request.application)
## other login methods are in gluon/contrib/login_methods
#########################################################################

crud.settings.auth = None                      # =auth to enforce authorization on crud

#########################################################################
## Define your tables below (or better in another model file) for example
##
## >>> db.define_table('mytable',Field('myfield','string'))
##
## Fields can be 'string','text','password','integer','double','boolean'
##       'date','time','datetime','blob','upload', 'reference TABLENAME'
## There is an implicit 'id integer autoincrement' field
## Consult manual for more options, validators, etc.
##
## More API examples for controllers:
##
## >>> db.mytable.insert(myfield='value')
## >>> rows=db(db.mytable.myfield=='value').select(db.mytable.ALL)
## >>> for row in rows: print row.id, row.myfield
#########################################################################
import datetime
now=datetime.date.today()

db.define_table('Types_of_songs',
            Field('song_type','string',requires=IS_NOT_EMPTY()))

#ssuming that artist and album name will come in dropdown box 
#else requires 'is not empty' should be removed 
#"db.Upload.album.requires=IS_IN_DB(db,'Album.id','Album.album')" shoul also be removed

db.define_table('Upload',
            Field('upload_a_song','upload',requires=IS_NOT_EMPTY()),
            Field('Type_of_song',db.Types_of_songs,requires=IS_NOT_EMPTY()),
            Field('Upload_on','date',default=now,requires=IS_NOT_EMPTY()),
            Field('Name','string',length=64,requires=IS_NOT_EMPTY()),
            Field('artist','string',length=64,requires=IS_NOT_EMPTY()),
            Field('album','string',requires=IS_NOT_EMPTY()))
 
db.define_table('Album',
            Field('album','string',requires=IS_NOT_EMPTY()),
            Field('Name',db.Upload))

db.define_table('Artist',
            Field('artist','string',requires=IS_NOT_EMPTY()),
            Field('Name',db.Upload))

db.define_table('Comments',
            Field('comment','text',length=512,requires=IS_NOT_EMPTY()),
            Field('Name',db.Upload),
            Field('Commented_on','date',default=now),
            Field('Nick_name','string'),
            Field('NAME_song','string'))

db.define_table('Rating',
            Field('Rate','integer',default=0),
            Field('Name',db.Upload,requires = IS_IN_DB(db,'Upload.id','%(Nick_name)s')),
            Field('Times_played','integer',default=0),
            Field('Name_song','string'),
            Field('Sum','integer',default=0),
            Field('id','integer'))
    
db.define_table('Playlist',
            Field('song',db.Upload),
            Field('user_id',db.auth_user),
            Field('Name','string'))

####################################
db.define_table('Views',
            Field('view','integer',default=0),
            Field('gana',db.Upload,requires = IS_IN_DB(db,'Upload.id','%(Nick_name)s')),
            Field('Name','string'))
    ###############################3##   
            
db.Comments.Nick_name.requires = IS_IN_DB(db,'Upload.id','%(Nick_name)s')
db.Upload.Upload_on.writable=False
db.Upload.Type_of_song.requires=IS_IN_DB(db,'Types_of_songs.id','Types_of_songs.song_type')
db.Upload.Name.requires=IS_NOT_IN_DB(db,'Upload.Name')
db.Comments.Name.requires=IS_IN_DB(db,'Upload.id','%(Name)s')
db.Playlist.song.requires=IS_IN_DB(db,db.Upload.id,'%(Name)s')

obj="""<object type="application/x-shockwave-flash" data="%(player)s?&song_url=%(url)s&" width="17" height="17"><param name="movie" value="%(player)s?&song_url=%(url)s&" /> <img src="noflash.gif" width="17" height="17" alt="" /></object>"""

#db.music.id.represent=lambda id: A('edit',_href=URL(r=request,c='default',f='edit_music',args=id))
db.Upload.upload_a_song.represent=lambda upload_a_song: SPAN(A('download',_href=URL(r=request,c='default',f='download',args=upload_a_song)),XML(obj % dict(player=URL(r=request,c='static',f='musicplayer.swf'),url=URL(r=request,c='default',f='download',args=upload_a_song))))
