(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/vibhor/Desktop/web2py/applications/music_library/models/db.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*- \n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n#########################################################################\n\nif request.env.web2py_runtime_gae:            # if running on Google App Engine\n    db = DAL(\'gae\')                           # connect to Google BigTable\n    session.connect(request, response, db = db) # and store sessions and tickets there\n    ### or use the following lines to store sessions in Memcache\n    # from gluon.contrib.memdb import MEMDB\n    # from google.appengine.api.memcache import Client\n    # session.connect(request, response, db = MEMDB(Client()))\nelse:                                         # else use a normal relational database\n    db = DAL(\'sqlite://storage.sqlite\')       # if not, use SQLite or other DB\n## if no need for session\n# session.forget()\n\n#########################################################################\n## Here is sample code if you need for \n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import *\nmail = Mail()                                  # mailer\nauth = Auth(globals(),db)                      # authentication/authorization\ncrud = Crud(globals(),db)                      # for CRUD helpers using auth\nservice = Service(globals())                   # for json, xml, jsonrpc, xmlrpc, amfrpc\nplugins = PluginManager()\n\nmail.settings.server = \'logging\' or \'smtp.gmail.com:587\'  # your SMTP server\nmail.settings.sender = \'you@gmail.com\'         # your email\nmail.settings.login = \'username:password\'      # your credentials or None\n\nauth.settings.hmac_key = \'sha512:5e51a644-2c9b-48f2-b226-79281a56d39c\'   # before define_tables()\nauth.define_tables()                           # creates all needed tables\nauth.settings.mailer = mail                    # for user email verification\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.messages.verify_email = \'Click on the link http://\'+request.env.http_host+URL(r=request,c=\'default\',f=\'user\',args=[\'verify_email\'])+\'/%(key)s to verify your email\'\nauth.settings.reset_password_requires_verification = True\nauth.messages.reset_password = \'Click on the link http://\'+request.env.http_host+URL(r=request,c=\'default\',f=\'user\',args=[\'reset_password\'])+\'/%(key)s to reset your password\'\n\n#########################################################################\n## If you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, uncomment and customize following\n# from gluon.contrib.login_methods.rpx_account import RPXAccount\n# auth.settings.actions_disabled=[\'register\',\'change_password\',\'request_reset_password\']\n# auth.settings.login_form = RPXAccount(request, api_key=\'...\',domain=\'...\',\n#    url = "http://localhost:8000/%s/default/user/login" % request.application)\n## other login methods are in gluon/contrib/login_methods\n#########################################################################\n\ncrud.settings.auth = None                      # =auth to enforce authorization on crud\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\n##\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n## There is an implicit \'id integer autoincrement\' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield=\'value\')\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\ndb.define_table(\'Types_of_songs\',\n            Field(\'song_type\',\'string\',requires=IS_NOT_EMPTY()))\n\nimport datetime\nnow=datetime.date.today()\n\ndb.define_table(\'Album\',\n            Field(\'album\',\'string\',requires=IS_NOT_EMPTY()))\n\ndb.define_table(\'Artist\',\n            Field(\'artist\',\'string\',requires=IS_NOT_EMPTY()))\n            \n#Assuming that artist and album name will come in dropdown box \n#else requires \'is not empty\' should be removed \n#"db.Upload.album.requires=IS_IN_DB(db,\'Album.id\',\'Album.album\')" shoul also be removed\n\ndb.define_table(\'Comments\',\n            Field(\'comment\',\'textbox\',length=512,requires=IS_NOT_EMPTY()),\n            Field(\'song\',db.Upload))\n\ndb.define_table(\'Upload\',\n            Field(\'upload_a_song\',\'upload\',requires=IS_NOT_EMPTY()),\n            Field(\'Type_of_song\',db.Types_of_songs,requires=IS_NOT_EMPTY()),\n            Field(\'Upload_on\',\'date\',default=now,requires=IS_NOT_EMPTY()),\n            Field(\'Name\',\'string\',length=64,requires=IS_NOT_EMPTY()),\n            Field(\'artist\',db.Artist,length=64,requires=IS_NOT_EMPTY()),\n            Field(\'album\',db.Album,requires=IS_NOT_EMPTY()))\n          \n            \ndb.Upload.Upload_on.writable=False\ndb.Upload.Type_of_song.requires=IS_IN_DB(db,\'Types_of_songs.id\',\'Types_of_songs.song_type\')\ndb.Upload.Name.requires=IS_NOT_IN_DB(db,\'Upload.Name\')\ndb.Upload.artist.requires=IS_IN_DB(db,\'Artist.id\',\'Artist.artist\')\ndb.Upload.album.requires=IS_IN_DB(db,\'Album.id\',\'Album.album\')\ndb.Comments.song.requires=IS_IN_DB(db,\'Upload.id\',\'Upload.name\')\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/home/vibhor/Desktop/web2py/gluon/restricted.py", line 178, in restricted\n    exec ccode in environment\n  File "/home/vibhor/Desktop/web2py/applications/music_library/models/db.py", line 95, in <module>\n    Field(\'song\',db.Upload))\n  File "/home/vibhor/Desktop/web2py/gluon/sql.py", line 1329, in __getattr__\n    return dict.__getitem__(self,key)\nKeyError: \'Upload\'\n'
p8
s.