(dp1
S'output'
p2
S''
sS'layer'
p3
S'C:\\Users\\suraj\\Desktop\\Studies\\web2py\\applications\\Music_Library/controllers/default.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*- \n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################  \n@auth.requires_login()\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    #table=plugin_jqgrid(db.Upload,columns=[\'Name\',\'Type_of_song\',\'artist\',\'album\'],col_widths=\n    #   {\'Name\':160,\'Type_of_song\':25,\'artist\':120,\'album\':120,\'file\':120},width=775,height=300)\n    table=plugin_jqgrid(db.Upload,columns=[\'id\',\'Type_of_song\',\'Name\',\'album\',\'artist\',\'upload_a_song\'],col_widths=\n     {\'id\':30,\'Name\':180,\'album\':160,\'artist\':160,\'Type_of_song\':20,\'upload_a_song\':100},width=640,height=220)\n    #This specifies the various coloums that one wants to show in the front page using yhe plugin jggrid\n    #all the song will be displayed in the playlist giving the details of various song,along with the optio to download it.\n    type_song=db(db.Types_of_songs.id>0).select(orderby = db.Types_of_songs.song_type)\n    #This allows the user to view songs of a particular gener  \n    return dict(type_song=type_song,table=table)\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login \n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@auth.requires_login()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    session.forget()\n    return service()\n\n\n\n\n######################################################################################################\n#def Types_of_songs():\n   #table=plugin_jqgrid(db.Upload,columns=[],col_widths=\n   #  {\'id\':80,\'name\':160,\'movie_album\':130,\'singer\':120,\'genre\':120,\'year\':100,\'file\':120},width=803,height=395)\n#   table=plugin_jqgrid(db.Upload,columns=[\'Name\',\'Type_of_song\',\'artist\',\'album\'],col_widths=\n#     {\'Name\':160,\'Type_of_song\':100,\'artist\':120,\'album\':120,\'file\':120},width=775,height=300)\n#   type_song=db(db.Types_of_songs.id>0).select()\n#   form=SQLFORM(db.Upload,fields=[\'upload_a_song\',\'Type_of_song\',\'Name\',\'artist\',\'album\'])\n#   if form.accepts(request.vars,session):\n#      response.flash=\'Song has been uploaded\'\n#  return dict(type_song=type_song,form=form,table=table)\n#######################################################################################################\n@auth.requires_membership(\'Super_user\')\ndef admin():\n    return dict()\n\n@auth.requires_membership(\'Super_user\')\ndef admin_remove_user():\n    user_list=db(db.auth_user.id>0).select()\n    return dict(user_list=user_list)\n\n@auth.requires_membership(\'Super_user\')\ndef delete_user():\n    db(db.auth_user.id==request.args(0)).delete()\n    redirect(URL(r=request,f=\'admin_remove_user\'))\n\n@auth.requires_membership(\'Super_user\')    \ndef admin_remove_song():\n    song=db(db.Upload.id>0).select(orderby=~db.Upload.Upload_on)\n    return dict(songs=song)\n\n@auth.requires_membership(\'Super_user\')\ndef delete_song():\n    db(db.Upload.id==request.args(0)).delete()\n    redirect(URL(r=request,f=\'admin_remove_song\'))\n\n@auth.requires_membership(\'Super_user\')    \ndef admin_remove_comments():\n    comments=db(db.Comments.id>0).select(orderby=~db.Comments.Commented_on)\n    return dict(comments=comments)\n\n@auth.requires_membership(\'Super_user\')\ndef delete_comment():\n    db(db.Comments.id==request.args(0)).delete()\n    redirect(URL(r=request,f=\'admin_remove_comments\'))\n\n@auth.requires_membership(\'Super_user\')\ndef admin_add_gener():\n    form=SQLFORM(db.Types_of_songs,fields=[\'song_type\'])\n    if form.accepts(request.vars,session):\n      response.flash=\'Gener Added\'\n    return dict(form=form)\n      \n@auth.requires_login()  \ndef upload():\n   form=SQLFORM(db.Upload,fields=[\'upload_a_song\',\'Type_of_song\',\'Name\',\'artist\',\'album\'])\n   # create a form in which the user can upload a song .It askes for various details like album,gener etc,while uploading\n   if form.accepts(request.vars,session):\n      response.flash=\'Song has been Uploaded\'\n      redirect(URL(r=request,f=\'index\'))#This redirects the user to the index page once the song has uploaded   \n   return dict(form=form)\n\n@auth.requires_login()\ndef view_songs():\n   #view=[]\n   #db().update(view[Upload.id]=Upload.id+1)\n   return dict(songs=db(db.Upload.Type_of_song==request.args(0)).select(orderby=~db.Upload.Upload_on))\n   #Shows the list of all the songs of a particular gener\n\n@auth.requires_login()\ndef song_details():\n   #db.Rating.Name_song.default=request.args(1)\n   song=db(db.Upload.id==request.args(0)).select()#"song" contains the name of the selected song which is passed as an argument \n   download=db(db.Upload.upload_a_song==request.args(0)).select()#allows user to download the song\n   comments=db(db.Comments.Name==request.args(0)).select(orderby=~db.Comments.Commented_on)#shows the previous comments to th song\n   rating=db(db.Rating.Name==request.args(0)).select()\n########################\n   \n#   y=request.args(0)\n   Countx=db(db.Views.gana==request.args(0)).select()\n   #print Countx\n   #################################################  \n   return dict(song=song,comments=comments,download=download,rating=rating,Count=Countx)\n   #return dict(song=song,counter=session.counter,download=download)\n\n@auth.requires_login()\ndef add_comment():\n   db.Comments.Nick_name.default = auth.user.first_name#sets "nick name "as the first name of the logged in user\n   db.Comments.Name.default=request.args(0)#sets "Name" as the id of the song selected\n   db.Comments.NAME_song.default=request.args(1)\n   form=SQLFORM(db.Comments,fields=[\'comment\'])#creates a  form in which comment can be given\n   if form.accepts(request.vars,session):\n      response.flash=\'Thanks for your Comments\'\n      redirect(URL(r=request,f=\'index\'))#This redirects the user to the index page once the song has uploaded \n   return dict(form=form)\n\n#def playlist():\n#    db.Playlist.song.default=auth.user.id\n#    db.Playlist.\n@auth.requires_login()    \ndef player():\n    \n    db.Views.insert(gana=request.args(1),Name=request.args(2))\n    songs=db(db.Views.gana==request.args(1)).select()[0]\n    Count=songs.view #song=db(db.Rating.Name==request.args(1)).select()[0] \n    db(db.Views.gana==request.args(1)).update(view=Count+1)\n    songs=db(db.Views.gana==request.args(1)).select()[0]\n    Count=songs.view\n    #print Count\n    file_name=URL(\'download\',args=request.args(0))#for using the audio tag to play a song from the selected gener \n    return dict(file_name=file_name)\n\n@auth.requires_login()\ndef playlist():\n    #print auth.user.id\n    db.Playlist.insert(user_id=auth.user.id,song=request.args(0),Name=request.args(1))\n    #print request.args(1)\n    #db.Playlist.Name.default=request.args(1)\n    redirect(URL(r=request,f=\'View_playlist\'))\n\n@auth.requires_login()    \ndef View_playlist():\n    return dict(songs=db(db.Playlist.user_id==auth.user.id).select())\n\n@auth.requires_login()\ndef delete_playlist():\n    db(db.Playlist.id==request.args(0)).delete()\n    redirect(URL(r=request,f=\'View_playlist\'))\n\n@auth.requires_login()\ndef rate():\n    form=SQLFORM(db.Rating,fields=[\'Rate\'])#creates a  form in which comment can be given\n    if form.accepts(request.vars,session):\n      response.flash=\'Thanks for rating this song\'\n      redirect(URL(r=request,f=\'index\'))\n##############################################\n@auth.requires_login()\ndef rating():\n     rate=int(request.args(0))\n     #y=request.args(1)\n     db.Rating.insert(Name=request.args(1),Name_song=request.args(2))\n     print request.args(2)\n     \n     \n     song=db(db.Rating.Name==request.args(1)).select()[0]   \n      \n     Count=song.Times_played\n     Sum=song.Sum\n     db(db.Rating.Name==request.args(1)).update(Times_played=Count+1)\n     db(db.Rating.Name==request.args(1)).update(Sum=Sum+rate)\n     song=db(db.Rating.Name==request.args(1)).select()[0]\n     \n     Count=song.Times_played\n     Sum=song.Sum\n     \n     div=Sum/Count\n     \n     db(db.Rating.Name==request.args(1)).update(Rate=div) \n#     print \'c_new=\',c\n #    print \'s_new=\',s\n  #   print div\n   #  print \'refresh\'\n     redirect(URL(r=request,f=\'index\'))\n     return dict()\n################################################\ndef top_10():\n     song_10=db().select(db.Rating.ALL,orderby=~db.Rating.Rate)\n     #Count=0  \n     #print song_10[3].Name\n     return dict (song_10 = song_10)\n     \ndef top_played():\n     song_played=db().select(db.Views.ALL,orderby=~db.Views.view)\n     return dict (song_played = song_played)\n\nresponse._vars=response._caller(song_details)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "gluon/restricted.py", line 178, in restricted\n  File "C:\\Users\\suraj\\Desktop\\Studies\\web2py\\applications\\Music_Library/controllers/default.py", line 239, in <module>\n  File "gluon/globals.py", line 96, in <lambda>\n  File "gluon/tools.py", line 2219, in f\n  File "C:\\Users\\suraj\\Desktop\\Studies\\web2py\\applications\\Music_Library/controllers/default.py", line 136, in song_details\n  File "gluon/sql.py", line 2496, in __eq__\n  File "gluon/sql.py", line 2924, in __init__\n  File "gluon/sql.py", line 505, in sql_represent\nValueError: invalid literal for int() with base 10: \'None\'\n'
p8
s.