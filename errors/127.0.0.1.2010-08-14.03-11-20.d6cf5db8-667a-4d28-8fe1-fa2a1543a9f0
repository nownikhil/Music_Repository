(dp1
S'output'
p2
S''
sS'layer'
p3
S'C:\\Users\\suraj\\Desktop\\Studies\\web2py\\applications\\music_library/controllers/default.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*- \n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################  \n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    response.flash = T(\'Welcome to web2py\')\n    return dict(message=T(\'Hello World\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login \n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    session.forget()\n    return service()\n\ndef Types_of_songs():\n   return dict(type_song=db(db.Types_of_Songs.id>0).select())\n\n\ndef view_songs():\n   Types_of_songs_id = request.args(0)\n   #Types_of_songs_id = request.args(0) or redirect(URL(r=request,f=\xe2\x80\x99index\xe2\x80\x99))\n   #db.comment.image_id.default = image_id\n   #db.comment.image_id.writable = db.comment.image_id.readable = False\n   #return dict(form1=form(db.Types_of_songs,Types_of_songs_id))\n   return dict(form1=form(db.Types_of_songs_id))\n\nresponse._vars=response._caller(Types_of_songs)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "gluon/restricted.py", line 178, in restricted\n  File "C:\\Users\\suraj\\Desktop\\Studies\\web2py\\applications\\music_library/controllers/default.py", line 67, in <module>\n  File "gluon/globals.py", line 96, in <lambda>\n  File "C:\\Users\\suraj\\Desktop\\Studies\\web2py\\applications\\music_library/controllers/default.py", line 56, in Types_of_songs\n  File "gluon/sql.py", line 1329, in __getattr__\nKeyError: \'Types_of_Songs\'\n'
p8
s.