(dp1
S'output'
p2
S''
sS'layer'
p3
S'C:\\Users\\suraj\\Desktop\\Studies\\web2py\\applications\\music_library/controllers/default.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*- \n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################  \n@auth.requires_login()\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    #table=plugin_jqgrid(db.Upload,columns=[\'Name\',\'Type_of_song\',\'artist\',\'album\'],col_widths=\n    #   {\'Name\':160,\'Type_of_song\':25,\'artist\':120,\'album\':120,\'file\':120},width=775,height=300)\n    table=plugin_jqgrid(db.Upload,columns=[\'id\',\'Type_of_song\',\'Name\',\'album\',\'artist\',\'upload_a_song\'],col_widths=\n     {\'id\':20,\'Name\':160,\'album\':130,\'artist\':120,\'Type_of_song\':120,\'upload_a_song\':140},width=650,height=200)\n    #This specifies the various coloums that one wants to show in the front page using yhe plugin jggrid\n    #all the song will be displayed in the playlist giving the details of various song,along with the optio to download it.\n    type_song=db(db.Types_of_songs.id>0).select()\n    #This allows the user to view songs of a particular gener  \n    return dict(type_song=type_song,table=table)\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login \n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    session.forget()\n    return service()\n\n\n\n\n######################################################################################################\n#def Types_of_songs():\n   #table=plugin_jqgrid(db.Upload,columns=[],col_widths=\n   #  {\'id\':80,\'name\':160,\'movie_album\':130,\'singer\':120,\'genre\':120,\'year\':100,\'file\':120},width=803,height=395)\n#   table=plugin_jqgrid(db.Upload,columns=[\'Name\',\'Type_of_song\',\'artist\',\'album\'],col_widths=\n#     {\'Name\':160,\'Type_of_song\':100,\'artist\':120,\'album\':120,\'file\':120},width=775,height=300)\n#   type_song=db(db.Types_of_songs.id>0).select()\n#   form=SQLFORM(db.Upload,fields=[\'upload_a_song\',\'Type_of_song\',\'Name\',\'artist\',\'album\'])\n#   if form.accepts(request.vars,session):\n#      response.flash=\'Song has been uploaded\'\n#  return dict(type_song=type_song,form=form,table=table)\n#######################################################################################################\n\n\ndef upload():\n   form=SQLFORM(db.Upload,fields=[\'upload_a_song\',\'Type_of_song\',\'Name\',\'artist\',\'album\'])\n   # create a form in which the user can upload a song .It askes for various details like album,gener etc,while uploading\n   if form.accepts(request.vars,session):\n      response.flash=\'Song has been Uploaded\'\n      redirect(URL(r=request,f=\'index\'))#This redirects the user to the index page once the song has uploaded   \n   return dict(form=form)\n\ndef view_songs():\n   return dict(songs=db(db.Upload.Type_of_song==request.args(0)).select())\n   #Shows the list of all the songs of a particular gener\n\ndef song_details():\n   song=db(db.Upload.id==request.args(0)).select()#"song" contains the name of the selected song which is passed as an argument \n   download=db(db.Upload.upload_a_song==request.args(0)).select()#allows user to download the song\n   comments=db(db.Comments.Name==request.args(0)).select(orderby=db.Comments.Commented_on)#shows the previous comments to th song\n   return dict(song=song,comments=comments,download=download)\n   #return dict(song=song,counter=session.counter,download=download)\n\n\ndef add_comment():\n   db.Comments.Nick_name.default = auth.user.first_name#sets "nick name "as the first name of the logged in user\n   db.Comments.Name.default=request.args(0)#sets "Name" as the id of the song selected\n   form=SQLFORM(db.Comments,fields=[\'comment\'])#creates a  form in which comment can be given\n   if form.accepts(request.vars,session):\n      response.flash=\'Thanks for your Comments\'\n      redirect(URL(r=request,f=\'index\'))#This redirects the user to the index page once the song has uploaded \n   return dict(form=form)\n\n#def playlist():\n#    db.Playlist.song.default=auth.user.id\n#    db.Playlist.\n    \ndef player():\n    file_name=URL(\'download\',args=request.args(0))#for using the audio tag to play a song from the selected gener \n    return dict(file_name=file_name)\n\n\ndef playlist():\n    db.Playlist.insert(user_id=db.auth_user.id,song=request.args(0))\n    return dict(user_id=user_id,song=song)\n    \n#def View_playlist():\n\nresponse._vars=response._caller(playlist)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "gluon/restricted.py", line 178, in restricted\n  File "C:\\Users\\suraj\\Desktop\\Studies\\web2py\\applications\\music_library/controllers/default.py", line 122, in <module>\n  File "gluon/globals.py", line 96, in <lambda>\n  File "C:\\Users\\suraj\\Desktop\\Studies\\web2py\\applications\\music_library/controllers/default.py", line 117, in playlist\n  File "gluon/sql.py", line 1951, in insert\n  File "gluon/sql.py", line 1942, in _insert\nTypeError: sequence item 1: expected string, Field found\n'
p8
s.